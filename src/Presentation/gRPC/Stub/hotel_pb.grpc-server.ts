// @generated by protobuf-ts 2.8.2 with parameter server_grpc1,client_none,generate_dependencies,optimize_code_size,add_pb_suffix
// @generated from protobuf file "hotel.proto" (syntax proto3)
// tslint:disable
import { SearchRoomResponse } from "./hotel_pb";
import { SearchRoomRequest } from "./hotel_pb";
import { CheckOutRequest } from "./hotel_pb";
import { CheckInRequest } from "./hotel_pb";
import { EmptyResponse } from "./hotel_pb";
import { CancelBookRequest } from "./hotel_pb";
import { BookingResponse } from "./hotel_pb";
import { BookingRequest } from "./hotel_pb";
import type * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service HotelService
 */
export interface IHotelService extends grpc.UntypedServiceImplementation {
    /**
     * @generated from protobuf rpc: Book(BookingRequest) returns (BookingResponse);
     */
    book: grpc.handleUnaryCall<BookingRequest, BookingResponse>;
    /**
     * @generated from protobuf rpc: CancelBook(CancelBookRequest) returns (EmptyResponse);
     */
    cancelBook: grpc.handleUnaryCall<CancelBookRequest, EmptyResponse>;
    /**
     * @generated from protobuf rpc: CheckIn(CheckInRequest) returns (EmptyResponse);
     */
    checkIn: grpc.handleUnaryCall<CheckInRequest, EmptyResponse>;
    /**
     * @generated from protobuf rpc: CheckOut(CheckOutRequest) returns (EmptyResponse);
     */
    checkOut: grpc.handleUnaryCall<CheckOutRequest, EmptyResponse>;
    /**
     * @generated from protobuf rpc: SearchRoom(SearchRoomRequest) returns (SearchRoomResponse);
     */
    searchRoom: grpc.handleUnaryCall<SearchRoomRequest, SearchRoomResponse>;
}
/**
 * @grpc/grpc-js definition for the protobuf service HotelService.
 *
 * Usage: Implement the interface IHotelService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IHotelService = ...
 * server.addService(hotelServiceDefinition, service);
 * ```
 */
export const hotelServiceDefinition: grpc.ServiceDefinition<IHotelService> = {
    book: {
        path: "/HotelService/Book",
        originalName: "Book",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => BookingResponse.fromBinary(bytes),
        requestDeserialize: bytes => BookingRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(BookingResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(BookingRequest.toBinary(value))
    },
    cancelBook: {
        path: "/HotelService/CancelBook",
        originalName: "CancelBook",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => EmptyResponse.fromBinary(bytes),
        requestDeserialize: bytes => CancelBookRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(EmptyResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(CancelBookRequest.toBinary(value))
    },
    checkIn: {
        path: "/HotelService/CheckIn",
        originalName: "CheckIn",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => EmptyResponse.fromBinary(bytes),
        requestDeserialize: bytes => CheckInRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(EmptyResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(CheckInRequest.toBinary(value))
    },
    checkOut: {
        path: "/HotelService/CheckOut",
        originalName: "CheckOut",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => EmptyResponse.fromBinary(bytes),
        requestDeserialize: bytes => CheckOutRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(EmptyResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(CheckOutRequest.toBinary(value))
    },
    searchRoom: {
        path: "/HotelService/SearchRoom",
        originalName: "SearchRoom",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => SearchRoomResponse.fromBinary(bytes),
        requestDeserialize: bytes => SearchRoomRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(SearchRoomResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(SearchRoomRequest.toBinary(value))
    }
};